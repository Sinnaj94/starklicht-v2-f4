//
// Created by Jannis Jahr on 2020-03-13.
//

#ifndef ANIMATOR_DISPLAY_H
#define ANIMATOR_DISPLAY_H
#include "color.h"
#include "controller.h"
class ControllerObserver
{
public:
    void setMode(Controller::MODE mode);

    void setColor(Color *color);
    void setDebug(uint16_t *debug);

    void setIsCritical(bool isCritical);

    void setRemainingMinutes(int remainingMinutes);
    int getRemainingMinutes();

    float getTemperature();
    bool debug = false;
    uint16_t *dma;

private:
    Controller::MODE mode = Controller::POTIS;

    int remainingMinutes;

public:
    Controller::MODE getMode() const;

    Color *getColor() const;

private:
    bool bluetoothState = false;

public:
    bool getBluetoothState();

    void setBluetoothState(bool bluetoothState);
    void setTemperature(float temperature);

private:
    Color *color = new Color();
    float globalPower = 100;
    float temperature = 28.0;

public:
    float getGlobalPower() const;

    void setGlobalPower(float globalPower);

    void setBatteryPercentage(float batteryPercentage);

private:
    float batteryPercentage = 0.0;

public:
    float getBatteryPercentage() const;

private:
    bool critical = false;
    int activeButton = -1;

public:
    int getActiveButton() const;

    void setActiveButton(int activeButton);

public:
    bool isCritical() const;
};

class Display : public ControllerObserver
{
public:
    Display(u8g2_t *u8g2);

    void update();
    void critical();

private:
    u8g2_t *U8G2;
    int versionMajor;
    int versionMinor;

    const char starklicht_logo[672] = {
        // 'Starklicht_logo_new', 128x20px
        0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
        0x1f, 0xcf, 0xff, 0x0f, 0x01, 0xff, 0x87, 0x03, 0xc7, 0x00, 0xe0, 0x7f, 0x87, 0x03, 0xdf, 0xfe,
        0x3f, 0xef, 0xff, 0x0f, 0x01, 0xff, 0xc7, 0x07, 0x87, 0x00, 0xe0, 0xff, 0xc7, 0x03, 0xdf, 0xfe,
        0x7d, 0xcf, 0xff, 0x0f, 0x81, 0xff, 0xe7, 0x0f, 0x07, 0x00, 0xe1, 0xf3, 0x87, 0x03, 0xdf, 0xfe,
        0x70, 0x00, 0xf0, 0x1f, 0x81, 0xe1, 0xe7, 0x1e, 0x07, 0x00, 0xe3, 0xc0, 0x07, 0x03, 0xc0, 0xe0,
        0x70, 0x00, 0xf0, 0x1f, 0x81, 0xe1, 0xe7, 0x3c, 0x07, 0x00, 0xe3, 0xc0, 0x07, 0x03, 0xc0, 0xe0,
        0x78, 0x00, 0xf0, 0x3b, 0xc1, 0xe1, 0xe7, 0x78, 0x07, 0x00, 0xe7, 0x80, 0x07, 0xff, 0xc0, 0xe0,
        0x7f, 0x00, 0xf0, 0x39, 0xc1, 0xff, 0xc7, 0xf0, 0x07, 0x00, 0xe7, 0x80, 0x07, 0xff, 0xc0, 0xe0,
        0x3f, 0xc0, 0xf0, 0x79, 0xe1, 0xff, 0xc7, 0xf8, 0x07, 0x00, 0xe7, 0x80, 0x07, 0xff, 0xc0, 0xe0,
        0x07, 0xe0, 0xf0, 0x70, 0xe1, 0xff, 0x07, 0x7c, 0x07, 0x00, 0xe7, 0x80, 0x07, 0x03, 0xc0, 0xe0,
        0x01, 0xe0, 0xf0, 0xff, 0xf1, 0xe7, 0x07, 0x3c, 0x07, 0x00, 0xe3, 0x80, 0x07, 0x03, 0xc0, 0xe0,
        0x00, 0xe0, 0xf0, 0xff, 0xf1, 0xe7, 0x87, 0x1e, 0x07, 0x00, 0xe3, 0xc0, 0x07, 0x03, 0xc0, 0xe0,
        0x21, 0xe0, 0xf0, 0xff, 0xf9, 0xe3, 0x87, 0x0f, 0x07, 0x00, 0xe3, 0xe1, 0x87, 0x03, 0xc0, 0xe0,
        0x7f, 0xe0, 0xf1, 0xe0, 0x79, 0xe3, 0xc7, 0x07, 0x87, 0xfc, 0xe1, 0xff, 0xe7, 0x03, 0xc0, 0xe0,
        0x7f, 0xc0, 0xf1, 0xc0, 0x39, 0xe1, 0xe7, 0x07, 0xc7, 0xfc, 0xe0, 0xff, 0xc7, 0x03, 0xc0, 0xe0,
        0x3f, 0x00, 0xf3, 0xc0, 0x3d, 0xe1, 0xe7, 0x03, 0xe7, 0xfc, 0xe0, 0x3f, 0x07, 0x03, 0xc0, 0xe0,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    void drawPercentage(int x0, int y0, int x1, int y1, float progress);

    void drawColor();

    void drawRGBWLabels();

    void drawBluetoothSymbol(int x, int y);

    void drawBattery(int x, int y, float percentage);

    void drawWarning();
};

#endif // ANIMATOR_DISPLAY_H
